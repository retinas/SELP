/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.0.0 (NJsonSchema v10.1.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICompaniesClient {
    getAll(): Observable<CompaniesListVm>;
    create(command: UpsertCompanyCommand): Observable<void>;
    update(command: UpsertCompanyCommand): Observable<void>;
    get(id: number): Observable<CompanyDetailVm>;
}

@Injectable()
export class CompaniesClient implements ICompaniesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<CompaniesListVm> {
        let url_ = this.baseUrl + "/api/Companies/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<CompaniesListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<CompaniesListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<CompaniesListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompaniesListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CompaniesListVm>(<any>null);
    }

    create(command: UpsertCompanyCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Companies/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    update(command: UpsertCompanyCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Companies/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    get(id: number): Observable<CompanyDetailVm> {
        let url_ = this.baseUrl + "/api/Companies/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<CompanyDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<CompanyDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CompanyDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CompanyDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CompanyDetailVm>(<any>null);
    }
}

export interface IContentCategoryClient {
    getAll(): Observable<ContentCategoriesListVm>;
    create(command: UpsertContentCategoryCommand): Observable<void>;
    update(command: UpsertContentCategoryCommand): Observable<void>;
    get(id: number): Observable<ContentCategoryDetailVm>;
}

@Injectable()
export class ContentCategoryClient implements IContentCategoryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<ContentCategoriesListVm> {
        let url_ = this.baseUrl + "/api/ContentCategory/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<ContentCategoriesListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentCategoriesListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ContentCategoriesListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentCategoriesListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentCategoriesListVm>(<any>null);
    }

    create(command: UpsertContentCategoryCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/ContentCategory/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    update(command: UpsertContentCategoryCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/ContentCategory/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    get(id: number): Observable<ContentCategoryDetailVm> {
        let url_ = this.baseUrl + "/api/ContentCategory/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ContentCategoryDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentCategoryDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ContentCategoryDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentCategoryDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentCategoryDetailVm>(<any>null);
    }
}

export interface IContentClient {
    getAll(): Observable<ContentListVm>;
    getAllByCompanyId(query: GetContentListQuery): Observable<ContentListVm>;
    create(command: UpsertContentCommand): Observable<void>;
    update(command: UpsertContentCommand): Observable<void>;
    get(id: number): Observable<ContentDetailVm>;
}

@Injectable()
export class ContentClient implements IContentClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<ContentListVm> {
        let url_ = this.baseUrl + "/api/Content/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<ContentListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ContentListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentListVm>(<any>null);
    }

    getAllByCompanyId(query: GetContentListQuery): Observable<ContentListVm> {
        let url_ = this.baseUrl + "/api/Content/GetAllByCompanyId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByCompanyId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByCompanyId(<any>response_);
                } catch (e) {
                    return <Observable<ContentListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByCompanyId(response: HttpResponseBase): Observable<ContentListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentListVm>(<any>null);
    }

    create(command: UpsertContentCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Content/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    update(command: UpsertContentCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Content/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    get(id: number): Observable<ContentDetailVm> {
        let url_ = this.baseUrl + "/api/Content/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ContentDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ContentDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentDetailVm>(<any>null);
    }
}

export interface IContentDifficultyClient {
    getAll(): Observable<ContentDifficultyListVm>;
    create(command: UpsertContentDifficultyCommand): Observable<void>;
    update(command: UpsertContentDifficultyCommand): Observable<void>;
    get(id: number): Observable<ContentDifficultyDetailVm>;
}

@Injectable()
export class ContentDifficultyClient implements IContentDifficultyClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<ContentDifficultyListVm> {
        let url_ = this.baseUrl + "/api/ContentDifficulty/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<ContentDifficultyListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentDifficultyListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ContentDifficultyListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentDifficultyListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentDifficultyListVm>(<any>null);
    }

    create(command: UpsertContentDifficultyCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/ContentDifficulty/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    update(command: UpsertContentDifficultyCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/ContentDifficulty/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    get(id: number): Observable<ContentDifficultyDetailVm> {
        let url_ = this.baseUrl + "/api/ContentDifficulty/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ContentDifficultyDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<ContentDifficultyDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ContentDifficultyDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ContentDifficultyDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ContentDifficultyDetailVm>(<any>null);
    }
}

export interface IDeviceContentSubscriptionClient {
    getAll(): Observable<DeviceContentSubscriptionListVm>;
    create(command: UpsertDeviceContentSubscriptionCommand): Observable<void>;
    update(command: UpsertDeviceContentSubscriptionCommand): Observable<void>;
    get(id: number): Observable<DeviceContentSubscriptionDetailVm>;
}

@Injectable()
export class DeviceContentSubscriptionClient implements IDeviceContentSubscriptionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<DeviceContentSubscriptionListVm> {
        let url_ = this.baseUrl + "/api/DeviceContentSubscription/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<DeviceContentSubscriptionListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceContentSubscriptionListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<DeviceContentSubscriptionListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceContentSubscriptionListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceContentSubscriptionListVm>(<any>null);
    }

    create(command: UpsertDeviceContentSubscriptionCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/DeviceContentSubscription/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    update(command: UpsertDeviceContentSubscriptionCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/DeviceContentSubscription/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    get(id: number): Observable<DeviceContentSubscriptionDetailVm> {
        let url_ = this.baseUrl + "/api/DeviceContentSubscription/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<DeviceContentSubscriptionDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceContentSubscriptionDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<DeviceContentSubscriptionDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceContentSubscriptionDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceContentSubscriptionDetailVm>(<any>null);
    }
}

export interface IDeviceClient {
    getAll(): Observable<DevicesListVm>;
    getAllByCompanyId(query: GetDevicesListQuery): Observable<DevicesListVm>;
    create(command: UpsertDeviceCommand): Observable<void>;
    update(command: UpsertDeviceCommand): Observable<void>;
    get(id: number): Observable<DeviceDetailVm>;
}

@Injectable()
export class DeviceClient implements IDeviceClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<DevicesListVm> {
        let url_ = this.baseUrl + "/api/Device/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<DevicesListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<DevicesListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<DevicesListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DevicesListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DevicesListVm>(<any>null);
    }

    getAllByCompanyId(query: GetDevicesListQuery): Observable<DevicesListVm> {
        let url_ = this.baseUrl + "/api/Device/GetAllByCompanyId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByCompanyId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByCompanyId(<any>response_);
                } catch (e) {
                    return <Observable<DevicesListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<DevicesListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByCompanyId(response: HttpResponseBase): Observable<DevicesListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DevicesListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DevicesListVm>(<any>null);
    }

    create(command: UpsertDeviceCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Device/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    update(command: UpsertDeviceCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Device/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    get(id: number): Observable<DeviceDetailVm> {
        let url_ = this.baseUrl + "/api/Device/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<DeviceDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<DeviceDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeviceDetailVm>(<any>null);
    }
}

export interface IOidcConfigurationClient {
    getClientRequestParameters(clientId: string | null): Observable<FileResponse>;
}

@Injectable()
export class OidcConfigurationClient implements IOidcConfigurationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getClientRequestParameters(clientId: string | null): Observable<FileResponse> {
        let url_ = this.baseUrl + "/_configuration/{clientId}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClientRequestParameters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClientRequestParameters(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetClientRequestParameters(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }
}

export interface ISubscriptionTypeClient {
    getAll(): Observable<SubscriptionTypeListVm>;
    create(command: UpsertSubscriptionTypeCommand): Observable<void>;
    update(command: UpsertSubscriptionTypeCommand): Observable<void>;
    get(id: number): Observable<SubscriptionTypeDetailVm>;
}

@Injectable()
export class SubscriptionTypeClient implements ISubscriptionTypeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<SubscriptionTypeListVm> {
        let url_ = this.baseUrl + "/api/SubscriptionType/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<SubscriptionTypeListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<SubscriptionTypeListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<SubscriptionTypeListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SubscriptionTypeListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SubscriptionTypeListVm>(<any>null);
    }

    create(command: UpsertSubscriptionTypeCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/SubscriptionType/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    update(command: UpsertSubscriptionTypeCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/SubscriptionType/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    get(id: number): Observable<SubscriptionTypeDetailVm> {
        let url_ = this.baseUrl + "/api/SubscriptionType/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<SubscriptionTypeDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<SubscriptionTypeDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SubscriptionTypeDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SubscriptionTypeDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SubscriptionTypeDetailVm>(<any>null);
    }
}

export interface IUserModeClient {
    getAll(): Observable<UserModesListVm>;
    create(command: UpsertUserModeCommand): Observable<void>;
    update(command: UpsertUserModeCommand): Observable<void>;
    get(id: number): Observable<UserModeDetailVm>;
}

@Injectable()
export class UserModeClient implements IUserModeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<UserModesListVm> {
        let url_ = this.baseUrl + "/api/UserMode/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<UserModesListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserModesListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<UserModesListVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModesListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserModesListVm>(<any>null);
    }

    create(command: UpsertUserModeCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/UserMode/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    update(command: UpsertUserModeCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/UserMode/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    get(id: number): Observable<UserModeDetailVm> {
        let url_ = this.baseUrl + "/api/UserMode/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<UserModeDetailVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserModeDetailVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<UserModeDetailVm> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModeDetailVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserModeDetailVm>(<any>null);
    }
}

export class CompaniesListVm implements ICompaniesListVm {
    companies?: CompanyLookUpDto[] | undefined;

    constructor(data?: ICompaniesListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["companies"])) {
                this.companies = [] as any;
                for (let item of _data["companies"])
                    this.companies!.push(CompanyLookUpDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CompaniesListVm {
        data = typeof data === 'object' ? data : {};
        let result = new CompaniesListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.companies)) {
            data["companies"] = [];
            for (let item of this.companies)
                data["companies"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICompaniesListVm {
    companies?: CompanyLookUpDto[] | undefined;
}

export class CompanyLookUpDto implements ICompanyLookUpDto {
    id?: number;
    name?: string | undefined;
    address?: string | undefined;
    province?: string | undefined;
    vat?: number;
    taxOffice?: string | undefined;

    constructor(data?: ICompanyLookUpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.address = _data["address"];
            this.province = _data["province"];
            this.vat = _data["vat"];
            this.taxOffice = _data["taxOffice"];
        }
    }

    static fromJS(data: any): CompanyLookUpDto {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyLookUpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["address"] = this.address;
        data["province"] = this.province;
        data["vat"] = this.vat;
        data["taxOffice"] = this.taxOffice;
        return data; 
    }
}

export interface ICompanyLookUpDto {
    id?: number;
    name?: string | undefined;
    address?: string | undefined;
    province?: string | undefined;
    vat?: number;
    taxOffice?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["extensions"]) {
                this.extensions = {} as any;
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        this.extensions![key] = _data["extensions"][key];
                }
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
    extensions?: { [key: string]: any; } | undefined;
}

export class UpsertCompanyCommand implements IUpsertCompanyCommand {
    id?: number | undefined;
    companyName?: string | undefined;
    companyAdress?: string | undefined;
    companyProvince?: string | undefined;
    companyVAT?: number;
    companyTaxOffice?: string | undefined;

    constructor(data?: IUpsertCompanyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.companyName = _data["companyName"];
            this.companyAdress = _data["companyAdress"];
            this.companyProvince = _data["companyProvince"];
            this.companyVAT = _data["companyVAT"];
            this.companyTaxOffice = _data["companyTaxOffice"];
        }
    }

    static fromJS(data: any): UpsertCompanyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertCompanyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyName"] = this.companyName;
        data["companyAdress"] = this.companyAdress;
        data["companyProvince"] = this.companyProvince;
        data["companyVAT"] = this.companyVAT;
        data["companyTaxOffice"] = this.companyTaxOffice;
        return data; 
    }
}

export interface IUpsertCompanyCommand {
    id?: number | undefined;
    companyName?: string | undefined;
    companyAdress?: string | undefined;
    companyProvince?: string | undefined;
    companyVAT?: number;
    companyTaxOffice?: string | undefined;
}

export class CompanyDetailVm implements ICompanyDetailVm {
    id?: number;
    companyName?: string | undefined;
    companyAdress?: string | undefined;
    companyProvince?: string | undefined;
    companyVAT?: number;
    companyTaxOffice?: string | undefined;

    constructor(data?: ICompanyDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.companyName = _data["companyName"];
            this.companyAdress = _data["companyAdress"];
            this.companyProvince = _data["companyProvince"];
            this.companyVAT = _data["companyVAT"];
            this.companyTaxOffice = _data["companyTaxOffice"];
        }
    }

    static fromJS(data: any): CompanyDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new CompanyDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyName"] = this.companyName;
        data["companyAdress"] = this.companyAdress;
        data["companyProvince"] = this.companyProvince;
        data["companyVAT"] = this.companyVAT;
        data["companyTaxOffice"] = this.companyTaxOffice;
        return data; 
    }
}

export interface ICompanyDetailVm {
    id?: number;
    companyName?: string | undefined;
    companyAdress?: string | undefined;
    companyProvince?: string | undefined;
    companyVAT?: number;
    companyTaxOffice?: string | undefined;
}

export class ContentCategoriesListVm implements IContentCategoriesListVm {
    contentCategories?: ContentCategoryLookUpDto[] | undefined;

    constructor(data?: IContentCategoriesListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["contentCategories"])) {
                this.contentCategories = [] as any;
                for (let item of _data["contentCategories"])
                    this.contentCategories!.push(ContentCategoryLookUpDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentCategoriesListVm {
        data = typeof data === 'object' ? data : {};
        let result = new ContentCategoriesListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentCategories)) {
            data["contentCategories"] = [];
            for (let item of this.contentCategories)
                data["contentCategories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IContentCategoriesListVm {
    contentCategories?: ContentCategoryLookUpDto[] | undefined;
}

export class ContentCategoryLookUpDto implements IContentCategoryLookUpDto {
    id?: number;
    description?: string | undefined;
    code?: number;

    constructor(data?: IContentCategoryLookUpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ContentCategoryLookUpDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContentCategoryLookUpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["code"] = this.code;
        return data; 
    }
}

export interface IContentCategoryLookUpDto {
    id?: number;
    description?: string | undefined;
    code?: number;
}

export class UpsertContentCategoryCommand implements IUpsertContentCategoryCommand {
    id?: number | undefined;
    description?: string | undefined;

    constructor(data?: IUpsertContentCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpsertContentCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertContentCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        return data; 
    }
}

export interface IUpsertContentCategoryCommand {
    id?: number | undefined;
    description?: string | undefined;
}

export class ContentCategoryDetailVm implements IContentCategoryDetailVm {
    id?: number;
    description?: string | undefined;
    code?: number;

    constructor(data?: IContentCategoryDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ContentCategoryDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new ContentCategoryDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["code"] = this.code;
        return data; 
    }
}

export interface IContentCategoryDetailVm {
    id?: number;
    description?: string | undefined;
    code?: number;
}

export class ContentListVm implements IContentListVm {
    contents?: ContentLookUpDto[] | undefined;

    constructor(data?: IContentListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["contents"])) {
                this.contents = [] as any;
                for (let item of _data["contents"])
                    this.contents!.push(ContentLookUpDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentListVm {
        data = typeof data === 'object' ? data : {};
        let result = new ContentListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contents)) {
            data["contents"] = [];
            for (let item of this.contents)
                data["contents"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IContentListVm {
    contents?: ContentLookUpDto[] | undefined;
}

export class ContentLookUpDto implements IContentLookUpDto {
    id?: number;
    title?: string | undefined;
    description?: string | undefined;
    price?: number;
    instructions?: string | undefined;
    userCompetence?: string | undefined;
    additionalInfo?: string | undefined;
    contentCategoryId?: number;
    contentDifficultyId?: number;
    oculusContentId?: string | undefined;
    imageBase64?: string | undefined;
    userModeIds?: number[] | undefined;

    constructor(data?: IContentLookUpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.instructions = _data["instructions"];
            this.userCompetence = _data["userCompetence"];
            this.additionalInfo = _data["additionalInfo"];
            this.contentCategoryId = _data["contentCategoryId"];
            this.contentDifficultyId = _data["contentDifficultyId"];
            this.oculusContentId = _data["oculusContentId"];
            this.imageBase64 = _data["imageBase64"];
            if (Array.isArray(_data["userModeIds"])) {
                this.userModeIds = [] as any;
                for (let item of _data["userModeIds"])
                    this.userModeIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ContentLookUpDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContentLookUpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["description"] = this.description;
        data["price"] = this.price;
        data["instructions"] = this.instructions;
        data["userCompetence"] = this.userCompetence;
        data["additionalInfo"] = this.additionalInfo;
        data["contentCategoryId"] = this.contentCategoryId;
        data["contentDifficultyId"] = this.contentDifficultyId;
        data["oculusContentId"] = this.oculusContentId;
        data["imageBase64"] = this.imageBase64;
        if (Array.isArray(this.userModeIds)) {
            data["userModeIds"] = [];
            for (let item of this.userModeIds)
                data["userModeIds"].push(item);
        }
        return data; 
    }
}

export interface IContentLookUpDto {
    id?: number;
    title?: string | undefined;
    description?: string | undefined;
    price?: number;
    instructions?: string | undefined;
    userCompetence?: string | undefined;
    additionalInfo?: string | undefined;
    contentCategoryId?: number;
    contentDifficultyId?: number;
    oculusContentId?: string | undefined;
    imageBase64?: string | undefined;
    userModeIds?: number[] | undefined;
}

export class GetContentListQuery implements IGetContentListQuery {
    companyId?: number | undefined;

    constructor(data?: IGetContentListQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyId = _data["companyId"];
        }
    }

    static fromJS(data: any): GetContentListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetContentListQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        return data; 
    }
}

export interface IGetContentListQuery {
    companyId?: number | undefined;
}

export class UpsertContentCommand implements IUpsertContentCommand {
    id?: number | undefined;
    additionalInfo?: string | undefined;
    contentCategoryId?: number;
    contentDifficultyId?: number;
    description?: string | undefined;
    instructions?: string | undefined;
    price?: number;
    title?: string | undefined;
    userCompetence?: string | undefined;
    imageBase64?: string | undefined;
    oculusContentId?: string | undefined;
    userModeIds?: number[] | undefined;

    constructor(data?: IUpsertContentCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.additionalInfo = _data["additionalInfo"];
            this.contentCategoryId = _data["contentCategoryId"];
            this.contentDifficultyId = _data["contentDifficultyId"];
            this.description = _data["description"];
            this.instructions = _data["instructions"];
            this.price = _data["price"];
            this.title = _data["title"];
            this.userCompetence = _data["userCompetence"];
            this.imageBase64 = _data["imageBase64"];
            this.oculusContentId = _data["oculusContentId"];
            if (Array.isArray(_data["userModeIds"])) {
                this.userModeIds = [] as any;
                for (let item of _data["userModeIds"])
                    this.userModeIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UpsertContentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertContentCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["additionalInfo"] = this.additionalInfo;
        data["contentCategoryId"] = this.contentCategoryId;
        data["contentDifficultyId"] = this.contentDifficultyId;
        data["description"] = this.description;
        data["instructions"] = this.instructions;
        data["price"] = this.price;
        data["title"] = this.title;
        data["userCompetence"] = this.userCompetence;
        data["imageBase64"] = this.imageBase64;
        data["oculusContentId"] = this.oculusContentId;
        if (Array.isArray(this.userModeIds)) {
            data["userModeIds"] = [];
            for (let item of this.userModeIds)
                data["userModeIds"].push(item);
        }
        return data; 
    }
}

export interface IUpsertContentCommand {
    id?: number | undefined;
    additionalInfo?: string | undefined;
    contentCategoryId?: number;
    contentDifficultyId?: number;
    description?: string | undefined;
    instructions?: string | undefined;
    price?: number;
    title?: string | undefined;
    userCompetence?: string | undefined;
    imageBase64?: string | undefined;
    oculusContentId?: string | undefined;
    userModeIds?: number[] | undefined;
}

export class ContentDetailVm implements IContentDetailVm {
    id?: number;
    title?: string | undefined;
    description?: string | undefined;
    price?: number;
    instructions?: string | undefined;
    userCompetence?: string | undefined;
    additionalInfo?: string | undefined;
    contentCategoryId?: number;
    contentDifficultyId?: number;
    oculusContentId?: string | undefined;
    imageBase64?: string | undefined;
    userModeIds?: number[] | undefined;

    constructor(data?: IContentDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.instructions = _data["instructions"];
            this.userCompetence = _data["userCompetence"];
            this.additionalInfo = _data["additionalInfo"];
            this.contentCategoryId = _data["contentCategoryId"];
            this.contentDifficultyId = _data["contentDifficultyId"];
            this.oculusContentId = _data["oculusContentId"];
            this.imageBase64 = _data["imageBase64"];
            if (Array.isArray(_data["userModeIds"])) {
                this.userModeIds = [] as any;
                for (let item of _data["userModeIds"])
                    this.userModeIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ContentDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new ContentDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["description"] = this.description;
        data["price"] = this.price;
        data["instructions"] = this.instructions;
        data["userCompetence"] = this.userCompetence;
        data["additionalInfo"] = this.additionalInfo;
        data["contentCategoryId"] = this.contentCategoryId;
        data["contentDifficultyId"] = this.contentDifficultyId;
        data["oculusContentId"] = this.oculusContentId;
        data["imageBase64"] = this.imageBase64;
        if (Array.isArray(this.userModeIds)) {
            data["userModeIds"] = [];
            for (let item of this.userModeIds)
                data["userModeIds"].push(item);
        }
        return data; 
    }
}

export interface IContentDetailVm {
    id?: number;
    title?: string | undefined;
    description?: string | undefined;
    price?: number;
    instructions?: string | undefined;
    userCompetence?: string | undefined;
    additionalInfo?: string | undefined;
    contentCategoryId?: number;
    contentDifficultyId?: number;
    oculusContentId?: string | undefined;
    imageBase64?: string | undefined;
    userModeIds?: number[] | undefined;
}

export class ContentDifficultyListVm implements IContentDifficultyListVm {
    contentDifficulties?: ContentDifficultyLookUpDto[] | undefined;

    constructor(data?: IContentDifficultyListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["contentDifficulties"])) {
                this.contentDifficulties = [] as any;
                for (let item of _data["contentDifficulties"])
                    this.contentDifficulties!.push(ContentDifficultyLookUpDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ContentDifficultyListVm {
        data = typeof data === 'object' ? data : {};
        let result = new ContentDifficultyListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contentDifficulties)) {
            data["contentDifficulties"] = [];
            for (let item of this.contentDifficulties)
                data["contentDifficulties"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IContentDifficultyListVm {
    contentDifficulties?: ContentDifficultyLookUpDto[] | undefined;
}

export class ContentDifficultyLookUpDto implements IContentDifficultyLookUpDto {
    id?: number;
    description?: string | undefined;
    code?: number;

    constructor(data?: IContentDifficultyLookUpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ContentDifficultyLookUpDto {
        data = typeof data === 'object' ? data : {};
        let result = new ContentDifficultyLookUpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["code"] = this.code;
        return data; 
    }
}

export interface IContentDifficultyLookUpDto {
    id?: number;
    description?: string | undefined;
    code?: number;
}

export class UpsertContentDifficultyCommand implements IUpsertContentDifficultyCommand {
    id?: number | undefined;
    description?: string | undefined;
    code?: number | undefined;

    constructor(data?: IUpsertContentDifficultyCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): UpsertContentDifficultyCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertContentDifficultyCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["code"] = this.code;
        return data; 
    }
}

export interface IUpsertContentDifficultyCommand {
    id?: number | undefined;
    description?: string | undefined;
    code?: number | undefined;
}

export class ContentDifficultyDetailVm implements IContentDifficultyDetailVm {
    id?: number;
    description?: string | undefined;
    code?: number;

    constructor(data?: IContentDifficultyDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ContentDifficultyDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new ContentDifficultyDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["code"] = this.code;
        return data; 
    }
}

export interface IContentDifficultyDetailVm {
    id?: number;
    description?: string | undefined;
    code?: number;
}

export class DeviceContentSubscriptionListVm implements IDeviceContentSubscriptionListVm {
    deviceContentSubscriptions?: DeviceContentSubscriptionLookUpDto[] | undefined;

    constructor(data?: IDeviceContentSubscriptionListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["deviceContentSubscriptions"])) {
                this.deviceContentSubscriptions = [] as any;
                for (let item of _data["deviceContentSubscriptions"])
                    this.deviceContentSubscriptions!.push(DeviceContentSubscriptionLookUpDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeviceContentSubscriptionListVm {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceContentSubscriptionListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceContentSubscriptions)) {
            data["deviceContentSubscriptions"] = [];
            for (let item of this.deviceContentSubscriptions)
                data["deviceContentSubscriptions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDeviceContentSubscriptionListVm {
    deviceContentSubscriptions?: DeviceContentSubscriptionLookUpDto[] | undefined;
}

export class DeviceContentSubscriptionLookUpDto implements IDeviceContentSubscriptionLookUpDto {
    id?: number;
    deviceId?: number;
    subscriptionTypeId?: number;
    contentId?: number;
    price?: number;
    startingDate?: Date;
    expiryDate?: Date;
    isActive?: boolean;
    numberOfPaymentInstallments?: number;
    companyName?: string | undefined;
    deviceNumber?: string | undefined;
    subscriptionTypeString?: string | undefined;
    contentTitle?: string | undefined;

    constructor(data?: IDeviceContentSubscriptionLookUpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deviceId = _data["deviceId"];
            this.subscriptionTypeId = _data["subscriptionTypeId"];
            this.contentId = _data["contentId"];
            this.price = _data["price"];
            this.startingDate = _data["startingDate"] ? new Date(_data["startingDate"].toString()) : <any>undefined;
            this.expiryDate = _data["expiryDate"] ? new Date(_data["expiryDate"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.numberOfPaymentInstallments = _data["numberOfPaymentInstallments"];
            this.companyName = _data["companyName"];
            this.deviceNumber = _data["deviceNumber"];
            this.subscriptionTypeString = _data["subscriptionTypeString"];
            this.contentTitle = _data["contentTitle"];
        }
    }

    static fromJS(data: any): DeviceContentSubscriptionLookUpDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceContentSubscriptionLookUpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deviceId"] = this.deviceId;
        data["subscriptionTypeId"] = this.subscriptionTypeId;
        data["contentId"] = this.contentId;
        data["price"] = this.price;
        data["startingDate"] = this.startingDate ? this.startingDate.toISOString() : <any>undefined;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["numberOfPaymentInstallments"] = this.numberOfPaymentInstallments;
        data["companyName"] = this.companyName;
        data["deviceNumber"] = this.deviceNumber;
        data["subscriptionTypeString"] = this.subscriptionTypeString;
        data["contentTitle"] = this.contentTitle;
        return data; 
    }
}

export interface IDeviceContentSubscriptionLookUpDto {
    id?: number;
    deviceId?: number;
    subscriptionTypeId?: number;
    contentId?: number;
    price?: number;
    startingDate?: Date;
    expiryDate?: Date;
    isActive?: boolean;
    numberOfPaymentInstallments?: number;
    companyName?: string | undefined;
    deviceNumber?: string | undefined;
    subscriptionTypeString?: string | undefined;
    contentTitle?: string | undefined;
}

export class UpsertDeviceContentSubscriptionCommand implements IUpsertDeviceContentSubscriptionCommand {
    id?: number | undefined;
    deviceId?: number;
    subscriptionTypeId?: number;
    contentId?: number;
    price?: number;
    startingDate?: Date;
    expiryDate?: Date;
    numberOfPaymentInstallments?: number;

    constructor(data?: IUpsertDeviceContentSubscriptionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deviceId = _data["deviceId"];
            this.subscriptionTypeId = _data["subscriptionTypeId"];
            this.contentId = _data["contentId"];
            this.price = _data["price"];
            this.startingDate = _data["startingDate"] ? new Date(_data["startingDate"].toString()) : <any>undefined;
            this.expiryDate = _data["expiryDate"] ? new Date(_data["expiryDate"].toString()) : <any>undefined;
            this.numberOfPaymentInstallments = _data["numberOfPaymentInstallments"];
        }
    }

    static fromJS(data: any): UpsertDeviceContentSubscriptionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertDeviceContentSubscriptionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deviceId"] = this.deviceId;
        data["subscriptionTypeId"] = this.subscriptionTypeId;
        data["contentId"] = this.contentId;
        data["price"] = this.price;
        data["startingDate"] = this.startingDate ? this.startingDate.toISOString() : <any>undefined;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        data["numberOfPaymentInstallments"] = this.numberOfPaymentInstallments;
        return data; 
    }
}

export interface IUpsertDeviceContentSubscriptionCommand {
    id?: number | undefined;
    deviceId?: number;
    subscriptionTypeId?: number;
    contentId?: number;
    price?: number;
    startingDate?: Date;
    expiryDate?: Date;
    numberOfPaymentInstallments?: number;
}

export class DeviceContentSubscriptionDetailVm implements IDeviceContentSubscriptionDetailVm {
    id?: number;
    deviceId?: number;
    subscriptionTypeId?: number;
    contentId?: number;
    price?: number;
    startingDate?: Date;
    expiryDate?: Date;
    isActive?: boolean;
    numberOfPaymentInstallments?: number;

    constructor(data?: IDeviceContentSubscriptionDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deviceId = _data["deviceId"];
            this.subscriptionTypeId = _data["subscriptionTypeId"];
            this.contentId = _data["contentId"];
            this.price = _data["price"];
            this.startingDate = _data["startingDate"] ? new Date(_data["startingDate"].toString()) : <any>undefined;
            this.expiryDate = _data["expiryDate"] ? new Date(_data["expiryDate"].toString()) : <any>undefined;
            this.isActive = _data["isActive"];
            this.numberOfPaymentInstallments = _data["numberOfPaymentInstallments"];
        }
    }

    static fromJS(data: any): DeviceContentSubscriptionDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceContentSubscriptionDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deviceId"] = this.deviceId;
        data["subscriptionTypeId"] = this.subscriptionTypeId;
        data["contentId"] = this.contentId;
        data["price"] = this.price;
        data["startingDate"] = this.startingDate ? this.startingDate.toISOString() : <any>undefined;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["numberOfPaymentInstallments"] = this.numberOfPaymentInstallments;
        return data; 
    }
}

export interface IDeviceContentSubscriptionDetailVm {
    id?: number;
    deviceId?: number;
    subscriptionTypeId?: number;
    contentId?: number;
    price?: number;
    startingDate?: Date;
    expiryDate?: Date;
    isActive?: boolean;
    numberOfPaymentInstallments?: number;
}

export class DevicesListVm implements IDevicesListVm {
    devices?: DeviceLookUpDto[] | undefined;

    constructor(data?: IDevicesListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["devices"])) {
                this.devices = [] as any;
                for (let item of _data["devices"])
                    this.devices!.push(DeviceLookUpDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevicesListVm {
        data = typeof data === 'object' ? data : {};
        let result = new DevicesListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.devices)) {
            data["devices"] = [];
            for (let item of this.devices)
                data["devices"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDevicesListVm {
    devices?: DeviceLookUpDto[] | undefined;
}

export class DeviceLookUpDto implements IDeviceLookUpDto {
    id?: number;
    model?: string | undefined;
    deviceNumber?: string | undefined;
    companyId?: string | undefined;
    companyName?: string | undefined;

    constructor(data?: IDeviceLookUpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.model = _data["model"];
            this.deviceNumber = _data["deviceNumber"];
            this.companyId = _data["companyId"];
            this.companyName = _data["companyName"];
        }
    }

    static fromJS(data: any): DeviceLookUpDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceLookUpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["model"] = this.model;
        data["deviceNumber"] = this.deviceNumber;
        data["companyId"] = this.companyId;
        data["companyName"] = this.companyName;
        return data; 
    }
}

export interface IDeviceLookUpDto {
    id?: number;
    model?: string | undefined;
    deviceNumber?: string | undefined;
    companyId?: string | undefined;
    companyName?: string | undefined;
}

export class GetDevicesListQuery implements IGetDevicesListQuery {
    companyId?: number | undefined;

    constructor(data?: IGetDevicesListQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyId = _data["companyId"];
        }
    }

    static fromJS(data: any): GetDevicesListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetDevicesListQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        return data; 
    }
}

export interface IGetDevicesListQuery {
    companyId?: number | undefined;
}

export class UpsertDeviceCommand implements IUpsertDeviceCommand {
    id?: number | undefined;
    model?: string | undefined;
    deviceNumber?: string | undefined;
    companyId?: number;

    constructor(data?: IUpsertDeviceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.model = _data["model"];
            this.deviceNumber = _data["deviceNumber"];
            this.companyId = _data["companyId"];
        }
    }

    static fromJS(data: any): UpsertDeviceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertDeviceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["model"] = this.model;
        data["deviceNumber"] = this.deviceNumber;
        data["companyId"] = this.companyId;
        return data; 
    }
}

export interface IUpsertDeviceCommand {
    id?: number | undefined;
    model?: string | undefined;
    deviceNumber?: string | undefined;
    companyId?: number;
}

export class DeviceDetailVm implements IDeviceDetailVm {
    id?: number;
    model?: string | undefined;
    deviceNumber?: string | undefined;
    companyId?: number;

    constructor(data?: IDeviceDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.model = _data["model"];
            this.deviceNumber = _data["deviceNumber"];
            this.companyId = _data["companyId"];
        }
    }

    static fromJS(data: any): DeviceDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["model"] = this.model;
        data["deviceNumber"] = this.deviceNumber;
        data["companyId"] = this.companyId;
        return data; 
    }
}

export interface IDeviceDetailVm {
    id?: number;
    model?: string | undefined;
    deviceNumber?: string | undefined;
    companyId?: number;
}

export class SubscriptionTypeListVm implements ISubscriptionTypeListVm {
    subscriptionTypes?: SubscriptionTypeLookUpDto[] | undefined;

    constructor(data?: ISubscriptionTypeListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["subscriptionTypes"])) {
                this.subscriptionTypes = [] as any;
                for (let item of _data["subscriptionTypes"])
                    this.subscriptionTypes!.push(SubscriptionTypeLookUpDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SubscriptionTypeListVm {
        data = typeof data === 'object' ? data : {};
        let result = new SubscriptionTypeListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.subscriptionTypes)) {
            data["subscriptionTypes"] = [];
            for (let item of this.subscriptionTypes)
                data["subscriptionTypes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISubscriptionTypeListVm {
    subscriptionTypes?: SubscriptionTypeLookUpDto[] | undefined;
}

export class SubscriptionTypeLookUpDto implements ISubscriptionTypeLookUpDto {
    id?: number;
    description?: string | undefined;

    constructor(data?: ISubscriptionTypeLookUpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): SubscriptionTypeLookUpDto {
        data = typeof data === 'object' ? data : {};
        let result = new SubscriptionTypeLookUpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        return data; 
    }
}

export interface ISubscriptionTypeLookUpDto {
    id?: number;
    description?: string | undefined;
}

export class UpsertSubscriptionTypeCommand implements IUpsertSubscriptionTypeCommand {
    id?: number | undefined;
    description?: string | undefined;

    constructor(data?: IUpsertSubscriptionTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpsertSubscriptionTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertSubscriptionTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        return data; 
    }
}

export interface IUpsertSubscriptionTypeCommand {
    id?: number | undefined;
    description?: string | undefined;
}

export class SubscriptionTypeDetailVm implements ISubscriptionTypeDetailVm {
    id?: number;
    description?: string | undefined;

    constructor(data?: ISubscriptionTypeDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): SubscriptionTypeDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new SubscriptionTypeDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        return data; 
    }
}

export interface ISubscriptionTypeDetailVm {
    id?: number;
    description?: string | undefined;
}

export class UserModesListVm implements IUserModesListVm {
    userModes?: UserModeLookUpDto[] | undefined;

    constructor(data?: IUserModesListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userModes"])) {
                this.userModes = [] as any;
                for (let item of _data["userModes"])
                    this.userModes!.push(UserModeLookUpDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserModesListVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserModesListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userModes)) {
            data["userModes"] = [];
            for (let item of this.userModes)
                data["userModes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserModesListVm {
    userModes?: UserModeLookUpDto[] | undefined;
}

export class UserModeLookUpDto implements IUserModeLookUpDto {
    id?: number;
    description?: string | undefined;
    code?: number;

    constructor(data?: IUserModeLookUpDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): UserModeLookUpDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserModeLookUpDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["code"] = this.code;
        return data; 
    }
}

export interface IUserModeLookUpDto {
    id?: number;
    description?: string | undefined;
    code?: number;
}

export class UpsertUserModeCommand implements IUpsertUserModeCommand {
    id?: number | undefined;
    description?: string | undefined;
    code?: number | undefined;

    constructor(data?: IUpsertUserModeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): UpsertUserModeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertUserModeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["code"] = this.code;
        return data; 
    }
}

export interface IUpsertUserModeCommand {
    id?: number | undefined;
    description?: string | undefined;
    code?: number | undefined;
}

export class UserModeDetailVm implements IUserModeDetailVm {
    id?: number;
    description?: string | undefined;
    code?: number;

    constructor(data?: IUserModeDetailVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): UserModeDetailVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserModeDetailVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["code"] = this.code;
        return data; 
    }
}

export interface IUserModeDetailVm {
    id?: number;
    description?: string | undefined;
    code?: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}